import cv2
import matplotlib.pyplot as plt


# Fonction permettant de savoir si un point peut être le début (gauche) de la ZMT
def debut_ZMT(image, x, y, s, n, t):
    """
    :param image: image étudiéeC:/Users/jules/PycharmProjects/STAGE2/pythonProject1/.venv/Scripts/python.exe
    :param (x,y) : coordonnées du point étudié
     :param s: seuil de détection pour le début de la ZMT
    :param n: nombre de pixels devant êtresous le seuils pour valider le début de la ZMT
    :param t: nombre de pixels testés à droite du pixel étudié
    :return bool : True si potentiel début de ZMT, False sinon
    """
    m = 0
    for i in range(t):
        if image[y, x + i] < s:
            m += 1
    if m >= n and image[y, x] < s:
        return True
    else:
        return False


# Fonction permettant de savoir si un point peut être la fin (droite) de la ZMT
def fin_ZMT(image, x, y, s, n, t):
    """
    :param image: image étudiée
    :param (x,y) : coordonnées du point étudié
    :param s: seuil de détection pour la fin de la ZMT
    :param n: nombre de pixels devant êtresous le seuils pour valider la fin de la ZMT
    :param t: nombre de pixels testés à gauche du pixel étudié
    :return bool : True si potentiel fin de ZMT, False sinon
    """
    m = 0
    for i in range(t):
        if image[y, x - i] < s:
            m += 1
    if m >= n and image[y, x] < s:
        return True
    else:
        return False


# Fonction permettant de détecter le début et la fin de la ZMT donc de calculer son épaisseur pour un y donné
def delta_x(image, y, sd, nd, td, sf, nf, tf):
    """
    :param image: image étudiée
    :param y: haueur à laquele on se place pour étudier l'épaisseur de la ZMT
    :return: épaisseur de la ZMT à une hauteur donnée
    """

    x = 80
    while debut_ZMT(image, x, y, sd, nd, td) == False:
        x += 1
    a = x
    x = 360
    while image[y, x] < 50:
        x -= 1
    b = 91 + a
    while b - a > 85:
        while fin_ZMT(image, x, y, sf, nf, tf) == False:
            x -= 1
        b = x
        x -= 1
    return [b - a, a, b]


# Fonction permettant de calculer la moyenne de l'épaisseur de la ZMT pour une image donnée
# Ne traite pas les valeurs aberrantes automatiquement (Epaisseur trop différente pour 2 ou 3 'y' consécutifs)
def moyenne(image, image_color, sd, nd, td, sf, nf, tf):
    s = 0
    v = 0
    for i in range(10, 151):
        if -10 < delta_x(image, i, sd, nd, td, sf, nf, tf)[0] - delta_x(image, i - 1, sd, nd, td, sf, nf, tf)[
            0] < 10 and -10 < delta_x(image, i, sd, nd, td, sf, nf, tf)[0] - \
                delta_x(image, i + 1, sd, nd, td, sf, nf, tf)[0] < 10:
            if delta_x(image, i, sd, nd, td, sf, nf, tf)[2] > 75:
                if -15 < delta_x(image, i, sd, nd, td, sf, nf, tf)[0] - delta_x(image, i - 2, sd, nd, td, sf, nf, tf)[
                    0] < 15 and -15 < delta_x(image, i, sd, nd, td, sf, nf, tf)[0] - \
                        delta_x(image, i + 2, sd, nd, td, sf, nf, tf)[0] < 15 and -15 < \
                        delta_x(image, i, sd, nd, td, sf, nf, tf)[0] - delta_x(image, i - 3, sd, nd, td, sf, nf, tf)[
                    0] < 15 and -15 < delta_x(image, i, sd, nd, td, sf, nf, tf)[0] - \
                        delta_x(image, i + 3, sd, nd, td, sf, nf, tf)[0] < 15:
                    s += delta_x(image, i, sd, nd, td, sf, nf, tf)[0]
                    cv2.circle(image_color, (delta_x(image, i, sd, nd, td, sf, nf, tf)[1], i), radius=2,
                               color=(0, 0, 255), thickness=-1)
                    cv2.circle(image_color, (delta_x(image, i, sd, nd, td, sf, nf, tf)[2], i), radius=2,
                               color=(0, 0, 255), thickness=-1)

        s += delta_x(image, i, sd, nd, td, sf, nf, tf)[0]
        v += 1
    if v != 0:
        return s / v
    else:
        return 0


# Pour la détection des bordures du diagramme(x,t)
# Même principe que 'debut_ZMT' mais avec x fixé (au lieu de y)
def debut_ZMT_inverse(image, x, y, s, n, t):
    m = 0
    for i in range(t):
        if image[y + i, x] < s:
            m += 1
    if m >= n and image[y, x] < s:
        return True
    else:
        return False


def fin_ZMT_inverse(image, x, y, s, n, t):
    m = 0
    for i in range(t):
        if image[y - i, x] < s:
            m += 1
    if m >= n and image[y, x] < s:
        return True
    else:
        return False


# Permet le détourage couleur du diagramme (x,t)
# Detecte 4 points clés en haut en en bas de la "bande" et les relie per des droites
def detourage_2(image):
    image_color = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)
    y = 363
    x = 0
    while debut_ZMT(image, x, y, 130, 6, 10) == False:
        x += 1
    point1_h = (x, y)
    x = 242
    while fin_ZMT(image, x, y, 130, 6, 10) == False:
        x -= 1
    point1_b = (x, y)
    x = 112
    y = 100
    while debut_ZMT_inverse(image, x, y, 150, 4, 10) == False:
        y += 1
    point2_h = (x, y)
    y = 340
    while fin_ZMT_inverse(image, x, y, 130, 6, 10) == False:
        y -= 1
    point2_b = (x, y)
    x = 180
    y = 70
    while debut_ZMT_inverse(image, x, y, 180, 4, 10) == False:
        y += 1
    point3_h = (x, y)
    x = 189
    y = 340
    while fin_ZMT_inverse(image, x, y, 180, 6, 10) == False:
        y -= 1
    point3_b = (x, y)
    x = 242
    y = 70
    while debut_ZMT_inverse(image, x, y, 185, 4, 10) == False:
        y += 1
    point4_h = (x, y)
    y = 250
    while fin_ZMT_inverse(image, x, y, 180, 4, 10) == False:
        y -= 1
    point4_b = (x, y)

    # Relie les points par des lignes
    cv2.line(image_color, point1_b, point2_b, (255, 0, 0), 2)  # Ligne rouge avec une épaisseur de 2
    cv2.line(image_color, point2_b, point3_b, (255, 0, 0), 2)  # Ligne rouge avec une épaisseur de 2
    cv2.line(image_color, point3_b, point4_b, (255, 0, 0), 2)  # Ligne rouge avec une épaisseur de 2
    cv2.line(image_color, point1_h, point2_h, (0, 0, 255), 2)  # Ligne bleue avec une épaisseur de 2
    cv2.line(image_color, point2_h, point3_h, (0, 0, 255), 2)  # Ligne bleue avec une épaisseur de 2
    cv2.line(image_color, point3_h, point4_h, (0, 0, 255), 2)  # Ligne bleue avec une épaisseur de 2

    return image_color, point1_h, point2_h, point3_h, point4_h
